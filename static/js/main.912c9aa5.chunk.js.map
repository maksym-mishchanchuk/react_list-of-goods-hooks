{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","sortBy","fieldForSort","isReversed","goods","SORT_BY_ALPHABET","sort","a","b","localeCompare","SORT_BY_LENGTH","length","reverse","App","useState","isReverseActive","setIsReverseActive","initialSortField","sortField","setSortField","preparedGoods","className","onClick","type","classnames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UASF,SAASC,EAAOC,EAAwBC,GACtC,IAAMC,EAAK,UAAOJ,GAElB,GAAIE,EACF,OAAQA,GACN,KAAKH,EAASM,iBACZD,EAAME,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MACrC,MAEF,KAAKT,EAASW,eACZN,EAAME,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAQxC,OAAOR,EAAaC,EAAMQ,UAAYR,G,SAxBnCL,K,wBAAAA,E,yBAAAA,E,qBAAAA,M,KA2BE,IAAMc,EAAgB,WAC3B,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAkCF,mBAASf,EAASkB,kBAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAA0BnB,EAAOiB,EAAWH,GAOlD,OACE,sBAAKM,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,WACPH,EAAapB,EAASM,kBACtBJ,EAAOF,EAASM,iBAAkBU,IAEpCQ,KAAK,SACLF,UACEG,IAAW,SACT,UACA,CAAE,WAAYN,IAAcnB,EAASM,mBAT3C,iCAeA,wBACEiB,QAAS,WACPH,EAAapB,EAASW,gBACtBT,EAAOF,EAASW,eAAgBK,IAElCQ,KAAK,SACLF,UACEG,IAAW,SACT,aACA,CAAE,WAAYN,IAAcnB,EAASW,iBAT3C,4BAeA,wBACEY,QAAS,WACPN,GAAoBD,IAEtBQ,KAAK,SACLF,UACEG,IACE,SACA,aACA,CAAE,YAAaT,IATrB,sBAgBEG,GAAaH,IACb,wBACEO,QAAS,kBAvDjBN,GAAmB,QACnBG,EAAapB,EAASkB,mBAuDdM,KAAK,SACLF,UACEG,IACE,SACA,YACA,CAAE,YAAY,IAPpB,sBAgBJ,6BACGJ,EAAcK,KAAI,SAAAC,GAAI,OACrB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC3HjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.912c9aa5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classnames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SORT_BY_LENGTH = 'length',\n  SORT_BY_ALPHABET = 'alpha',\n  initialSortField = '',\n}\n\nfunction sortBy(fieldForSort: SortType, isReversed: boolean): string[] {\n  const goods = [...goodsFromServer];\n\n  if (fieldForSort) {\n    switch (fieldForSort) {\n      case SortType.SORT_BY_ALPHABET:\n        goods.sort((a, b) => a.localeCompare(b));\n        break;\n\n      case SortType.SORT_BY_LENGTH:\n        goods.sort((a, b) => a.length - b.length);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return isReversed ? goods.reverse() : goods;\n}\n\nexport const App: React.FC = () => {\n  const [isReverseActive, setIsReverseActive] = useState(false);\n  const [sortField, setSortField] = useState(SortType.initialSortField);\n\n  const preparedGoods: string[] = sortBy(sortField, isReverseActive);\n\n  const resetAllSort = (): void => {\n    setIsReverseActive(false);\n    setSortField(SortType.initialSortField);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => {\n            setSortField(SortType.SORT_BY_ALPHABET);\n            sortBy(SortType.SORT_BY_ALPHABET, isReverseActive);\n          }}\n          type=\"button\"\n          className={\n            classnames('button',\n              'is-info',\n              { 'is-light': sortField !== SortType.SORT_BY_ALPHABET })\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => {\n            setSortField(SortType.SORT_BY_LENGTH);\n            sortBy(SortType.SORT_BY_LENGTH, isReverseActive);\n          }}\n          type=\"button\"\n          className={\n            classnames('button',\n              'is-success',\n              { 'is-light': sortField !== SortType.SORT_BY_LENGTH })\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            setIsReverseActive(!isReverseActive);\n          }}\n          type=\"button\"\n          className={\n            classnames(\n              'button',\n              'is-warning',\n              { 'is-light': !isReverseActive },\n            )\n          }\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReverseActive) && (\n          <button\n            onClick={() => resetAllSort()}\n            type=\"button\"\n            className={\n              classnames(\n                'button',\n                'is-danger',\n                { 'is-light': true },\n              )\n            }\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}